import ast, os, random
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#QUARENTINED REASON:cannot remember what it was going to be used
#                   for and how but could serve usefull in the future.
class MIH:  #Matrix Information Handle
    
    def __init__(self):
        
        self.matrix_file='matrices.txt'
        self.base='base_files.txt'

        self.file=open(self.base,'r')
        info=ast.literal_eval(self.file.read())
        self.file.close()


        for i in info:
            path=info[i]

            if not os.path.isfile(path):
                file=open(path,'w')
                file.close()

    #=======================================================================
    #=======================================================================
    #=======================================================================
    '''evaluates the file that is given and returns the evalutated'''
    def eval_file(self,file):
        try:
            file=open(file,'r')
            info=ast.literal_eval(file.read())
            file.close()
            return info
        except:
            print('eval could not be done possibly due to bad formatting/nwith the file provided')
    #=======================================================================
    #=======================================================================
    #=======================================================================
    
    
    #=======================================================================
    #=======================================================================
    #=======================================================================
    def get_current_matrices(self):
        paths=self.get_paths()
        m_path=paths['matrices']
        info=self.eval_file(m_path)
        names=info['names']
        return names
    #=======================================================================
    #=======================================================================
    #=======================================================================
    
    #=======================================================================
    #=======================================================================
    #=======================================================================
    def get_paths(self):
        file=open(self.base,'r')
        info=ast.literal_eval(file.read())
        file.close()
        return info
    #=======================================================================
    #=======================================================================
    #=======================================================================


    #=======================================================================
    #=======================================================================
    #=======================================================================
    def format_auth(self):
        a_path=self.get_paths()['auth_file']
        forma="{'current_tags':[],'used_tags':[],'unused_tags':[]}"

        file=open(a_path,'w')
        file.write(forma)
        file.close()
    #=======================================================================
    #=======================================================================
    #=======================================================================
    
    #=======================================================================
    #=======================================================================
    #=======================================================================
    def get_matrix_dimensions(self,mat):
        height=0
        width=0
        length=0
        
        for i in mat:
            height+=1
        for i in mat[0]:
            width+=1
            
        try:
            for i in mat[0][0]:
                length+=1
        except:
            length=width
            width=height
            height=0
            
        return height,width,length
    #=======================================================================
    #=======================================================================
    #=======================================================================
    
    #=========================================================================
    #=========================================================================
    #=========================================================================
    '''used to get the item held within the 3d coordinates within the matrix'''
    def get_item(self,x,y,z,matr):
        return matr[x][y][z]
    #=========================================================================
    #=========================================================================
    #=========================================================================
    
    
    
    #=======================================================================
    #=======================================================================
    #=======================================================================
    def format_mstates(self):
        paths=self.get_paths()
        path=paths['m_states']
        form="{'primary_state':True}"
        file=open(path,'w')
        file.write(form)
        file.close()
    #=======================================================================
    #=======================================================================
    #=======================================================================
    
    #=======================================================================
    #=======================================================================
    #=======================================================================
    def get_primary_state(self):
        paths=self.get_paths()
        path=paths['m_states']
        info=self.eval_file(path)
        return info['primary_state']
    #=======================================================================
    #=======================================================================
    #=======================================================================
    
    #=======================================================================
    #=======================================================================
    #=======================================================================
    def format_b_files(self):
        self.format_mstates()
        self.format_auth()
    #=======================================================================
    #=======================================================================
    #=======================================================================    


    #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    
    #=======================================================================
    #=======================================================================
    #=======================================================================
    '''
    creates a basic matrix name by looking at "matrices.txt" and 
    checking the names that have been used and returning a name
    that currently does not exist
    '''
    def create_matrix_name(self):
        base_name='m_'
        m_file=self.eval_file(self.eval_file(self.base)['matrices'])
        names=m_file['names']
        count=0
        m_name=base_name+str(count)
        
        while m_name in names:
            count+=1
            m_name=base_name+str(count)
            
        return m_name
        
    #=======================================================================
    #=======================================================================
    #=======================================================================
    
    
    #=======================================================================
    #=======================================================================
    #=======================================================================
    
    '''
    creates an authentication key (a randomized key) and returns it: for now 
    the key is not being used but it might be later for authentication purposes
    while configuring the matrices or getting information about a matrix
    '''
    
    def create_auth_key(self):
        
        flag=True
        key_len=16
        final_key=''
        a_info=self.eval_file(self.eval_file(self.base)['auth_file'])
        ch=string.ascii_uppercase+string.punctuation
        
        
        def make_key():
            fin_key=''
            for i in range(key_len):
                fin_key+=ch[random.randrange(len(ch))]
            return fin_key
        
        
        while flag:
            count=0
            mkey=make_key()
            
            for i in a_info:
                if mkey not in a_info[i]:
                    count+=1
            
            
            if count == len(a_info):
                flag=False
                final_key=mkey
                
        return final_key
        
    #=======================================================================
    #=======================================================================
    #=======================================================================
    
    
    #=======================================================================
    #=======================================================================
    #=======================================================================
    def get_matrix_info(self,matrix_name):
        paths=self.get_paths()
        m_path=paths['matrices']
        info=self.eval_file(m_path)
        mat=info['items'][matrix_name]['matrix']
        flags=info['flag_status'][matrix_name]
        
        return [mat,flags]
    #=======================================================================
    #=======================================================================
    #=======================================================================
    
    #=======================================================================
    #=======================================================================
    #=======================================================================
    '''formats the matrices file "matrices.txt"'''
    def matrices_format(self):
        matrix_form="{'names':[],'items':{},'flag_status':{}}"
        file=open(self.matrix_file,'w')
        file.write(matrix_form)
        file.close()
        
    #=======================================================================
    #=======================================================================
    #=======================================================================
    
    #=======================================================================
    #=======================================================================
    #=======================================================================
    def get_matrix_face(self,face,matr):
        
        height,width,length=self.get_matrix_dimensions(matr)
        
        if face=='front':
            return matr[0]
        elif face=='back':
            return matr[height-1]
        elif face=='right':
            fm=[]
            
            for i in range(width):
                fm.append([])
            for i in range(height):
                
                for j in range(width):
                    item=matr[i][j][length-1]
                    fm[j].append(item)
            
            return fm
                
        elif face=='left':
            fm=[]
            
            for i in range(width):
                fm.append([])
            for i in range(height):
                
                for j in range(width):
                    item=matr[i][j][0]
                    fm[j].append(item)
            
            return fm
        elif face=='top':
            fm=[]
            
            for i in range(height):
                fm.append([])
            for i in range(height):
                i_2=(height-1)-i
                for j in range(length):
                    item=matr[i][0][j]
                    fm[i_2].append(item)
            return fm
            
        elif face=='bottom':
            fm=[]
            
            for i in range(height):
                fm.append([])
            for i in range(height):
                for j in range(length):
                    item=matr[i][width-1][j]
                    fm[i].append(item)
            
            return fm
                    

    #=======================================================================
    #=======================================================================
    #=======================================================================
    
    #=======================================================================
    #=======================================================================
    #=======================================================================
    def create_flag_layer(self,mt):
        matr=mt
        flag_layer={}
        faces=['front','back','right','left','top','bottom']
        
        
        for i in faces:
            
            fholder={}
            face=self.get_matrix_face(i,matr)
            h,w,l=self.get_matrix_dimensions(face)
            
            for k in range(w):
                for j in range(l):
                    fholder[face[k][j]]=[False,[None,None,None]] #[ is connected , [ matrix connected to , face , section ] ]
            flag_layer[i]=fholder
        
            
        return flag_layer
        
            
            
            
        #height,width,length=self.get_matrix_dimensions(matr)
        
    #=======================================================================
    #=======================================================================
    #=======================================================================

    #=======================================================================
    #=======================================================================
    #=======================================================================
    '''adds matrix information to the "matrices.txt" file'''
    def add_new_matrix(self,mat,channels):
        paths=self.eval_file(self.base)
        mat_path=paths['matrices']
        m_file=self.eval_file(mat_path)
        m_name=self.create_matrix_name()
        m_key=self.create_auth_key()
        flag_layer=self.create_flag_layer(mat)
        chans=channels
        
        
        fin_info={'auth_key':m_key,'matrix':mat,'channels':chans}
        m_file['names'].append(m_name)
        m_file['items'][m_name]=fin_info
        m_file['flag_status'][m_name]=flag_layer
        
        
        
        file=open(mat_path,'w')
        file.write(str(m_file))
        file.close()
        
    #=======================================================================
    #=======================================================================
    #=======================================================================
        
        
    
    #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++